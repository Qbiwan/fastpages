{
  
    
        "post0": {
            "title": "Beginner's Guide to Mambaforge Installation",
            "content": "We will be using the Linux shell to install Mambaforge. For Mac and Windows users new to using the terminal, refer to the following: . For Mac Users, refer to Apple’s Terminal User Guide . | For Windows Users, refer to Microsoft’s Install Linux on Windows with WSL. . | . | . 1. Check if Python is already installed in your system . Most of the time, you will find an existing version of Python already installed in your machine. This is the System Python, which is used by your system. . user2022@ubuntu:~$ python Python 3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0] on linux Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information. user2022@ubuntu:~$ which python /usr/bin/python . | This is not the Python we want to be using. We want to install a separate version of Python. Which Python you install is going to make a difference in making how easy everything is. Mambaforge is the recommended way to install Python for this course. . | Next, make sure you are in your home directory by typing the command cd Use the command pwd to print out the directory you are currently in. In the example below, the home directory is /home/user2022@ubuntu/ . user2022@ubuntu:~$ cd user2022@ubuntu:~$ pwd /home/user2022@ubuntu/ . | . 2 No existing Conda environment in your home directory . If, in your home directory, there is any conda environment such as Anaconda, Miniforge, Mambaforge. etc, delete them. If you are unsure about deleting them, move them somewhere else. | . . If you are confident, remove the directory permanently; if unsure, move the directory elsewhere instead. In the example below, there is an existing miniconda in the home directory, If you are confident, you can run rm -rf to remove permanently the conda environment. Note that when you run rm -rf on a directory, all files and sub-folders will be removed permanently. . user2022@ubuntu:~$ pwd /home/user2022@ubuntu/ user2022@ubuntu:~$ ls miniconda user2022@ubuntu:~$ rm -rf miniconda . | If you are unsure about removing the conda environment, you may want to keep it. One of the ways, for example, is to use the command mv to rename it. . user2022@ubuntu:~$ pwd /home/user2022@ubuntu/ user2022@ubuntu:~$ ls miniconda user2022@ubuntu:~$ mv miniconda miniconda.old . | . 3 No ipython and jupyter installed in your System Python . Ideally, there should be no ipython and jupyter in your system Python. Running the command ipython and jupyter should give you error messages that both of them can’t be found. . user2022@ubuntu:~$ ipython Command &#39;ipython&#39; not found, did you mean: command &#39;ipython3&#39; from deb ipython3 (7.13.0-1) command &#39;bpython&#39; from deb bpython (0.18-3) Try: sudo apt install &lt;deb name&gt; . user2022@ubuntu:~$ jupyter Command &#39;jupyter&#39; not found, but can be installed with: sudo snap install jupyter # version 1.0.0, or sudo apt install jupyter-core # version 4.6.3-3 See &#39;snap info jupyter&#39; for additional versions. . | If they are already installed, you can remove them by running pip uninstall ipython and pip uninstall jupyter. For example, . user2022@ubuntu:~$ sudo pip uninstall ipython Found existing installation: ipython 8.4.0 Uninstalling ipython-8.4.0: Would remove: /home/user2022/.local/bin/ipython3 /home/user2022/.local/lib/python3.8/site-packages/IPython/* /home/user2022/.local/lib/python3.8/site-packages/ipython-8.4.0.dist-info/* /home/user2022/.local/share/man/man1/ipython.1 Proceed (y/n)? y Successfully uninstalled ipython-8.4.0 . | If you are unable to successfully uninstall them, you might want to remove them using rm -rf. . For example, if the ipython in your system Python stubbornly refused to be uninstalled, you can find out where are its files stored, and then remove them permanently. . user2022@ubuntu:~$ which ipython /home/user2022/.local/bin/ipython user2022@ubuntu:~$ rm -rf /home/user2022/.local/bin/ipython user2022@ubuntu:~$ which ipython user2022@ubuntu:~$ . | . . Note that all files and sub-folders in the directory will be removed permanently when you run rm -rf. 4. Download Mambaforge . Create a new directory and name it anything that you like. Below we named it downloads. Change directory to downloads by typing cd downloads. . user2022@ubuntu:~$ mkdir downloads user2022@ubuntu:~$ cd downloads user2022@ubuntu:~/downloads$ pwd /home/user2022@ubuntu/downloads . | Click on the following link to visit Conda-forge’s Github page: https://github.com/conda-forge/miniforge . | Scroll down the page until you see Mambaforge. . . | Select the relevant Mambaforge installer for your OS and Architecture. Mouse over the download link to Copy the link address . . | Type the command wget, then paste the download link you have copied from the previous step. This will download the installer, which is a shell script, from the copied link. Once successfully downloaded, the shell script ending with .sh should be in the folder. . user2022@ubuntu:~/downloads$ wget https://github.com/.../Mambaforge-Linux-x86_64.sh user2022@ubuntu:~/downloads$ls Mambaforge-Linux-x86_64.sh . What&#39;s inside this Mambaforge shell script? To look at what is inside this downloaded .sh file, run the following command: less Mambaforge-Linux-x86_64.sh Note that the filename may vary, depending on which file you&#39;d downloaded. You will see the commands that shell will run, line by line, to install Mambaforge. Press the letter q to quit reading. | . 5. Install Mamba . Let’s install Mambaforge by running the shell script using bash. . user2022@ubuntu:~/downloads$ bash Mambaforge-Linux-x86_64.sh . | This will start the installation process. You should see the following messages in your teminal. . Welcome to Mambaforge 4.12.0-0 In order to continue the installation process, please review the license agreement. Please, press ENTER to continue &gt;&gt;&gt; . Type yes to accept the license terms. . Do you accept the license terms? [yes|no] [no] &gt;&gt;&gt; yes . Press Enter to confirm the location of the installation. Note that by default Mambaforge will be installed in your home directory. In the example below, that location is home/user2022@ubuntu/mambaforge. . Mambaforge will now be installed into this location: /home/user2022/mambaforge - Press ENTER to confirm the location - Press CTRL-C to abort the installation - Or specify a different location below [/home/user2022/mambaforge] &gt;&gt;&gt; . Type yes make the installer initialize Mambaforge. Next time when you open your terminal, the python environment will be set up automatically for you. . Transaction finished installation finished. Do you wish the installer to initialize Mambaforge by running conda init? [yes|no] [no] &gt;&gt;&gt; yes . Once conda init is done, it will ask you to close and restart your terminal. If the installation is successful, you will see the word (base) appearing in front of your shell prompt, upon restarting the terminal. Notice that if you type the command which python, it will now show a Python that is different from the system Python from Step 1. . (base) user2022@ubuntu:~$ (base) user2022@ubuntu:~$ which python /home/user2022/mambaforge/bin/python . How do I get out of this Python environment? Use the following two commands: - mamba deactivate: to get out of the environment - mamba activate: to get back into the environment | . 6. Install Pytorch and Jupyter . . Try using &#39;mamba install&#39; as much as possible, rather than &#39;conda install&#39; or &#39;pip install&#39; Now that our Python environment has been set up, we can start installing softwares that we need for doing deep-learning, such as jupyterlab, ipython, pytorch …etc. . It’s especially important to have good Pytorch and Jupyter installation on your machine. The recommendation is to use mamba install when installing both of them, as it will give you a more optimized installation in a faster, fuss-free manner. . | Installing Pytorch: on Pytorch’s Install Pytorch page, select your preference. The example below install a cpu version of Pytorch, and assumes that there is no GPU on your laptop. If you have GPU on your machine, select the relevant CUDA version instead. Notice that it is however using conda install, which we will replace with mamba install. . (base) user2022@ubuntu:~$ mamba install pytorch torchvision torchaudio cpuonly -c pytorch . . | Installing Jupyter Lab: on Jupyterlab’s Installation page, the installation command is mamba install -c conda-forge jupyterlab. Since the default channel for mamba is already conda-forge, we can simply ran . (base) user2022@ubuntu:~$ mamba install jupyterlab . | That’s all. Have fun! . (base) user2022@ubuntu:~$ jupyter lab . | P.S. After running rm -rf a few times and removing permanently files you shouldn’t, you’ll get used to it. I did. :laughing: . | .",
            "url": "https://qbiwan.github.io/fastpages/mamba-installation",
            "relUrl": "/mamba-installation",
            "date": " • May 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://qbiwan.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://qbiwan.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://qbiwan.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://qbiwan.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}